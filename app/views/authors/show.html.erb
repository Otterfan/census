<%= javascript_include_tag 'https://cdn.plot.ly/plotly-1.54.1.min.js' %>
<% page_title(@author.full_name) %>
<div class="container public-show-name" id="search-results">

  <%= render 'author_heading' %>
</div>

<%# Tab navigation %>
<ul class="nav nav-tabs" role="tablist">

  <%= render 'text_type_tab',
             author: @author,
             type: 'translation_book',
             url: 'translations/books',
             tab_label: 'Translations (volumes)'
  %>

  <%= render 'text_type_tab',
             author: @author,
             type: 'translation_part',
             url: 'translations/items',
             tab_label: 'Translations (items)'
  %>

  <%= render 'text_type_tab',
             author: @author,
             type: 'study_book',
             url: 'studies/books',
             tab_label: 'Studies (volumes)'
  %>

  <%= render 'text_type_tab',
             author: @author,
             type: 'study_part',
             url: 'studies/items',
             tab_label: 'Studies (items)'
  %>

  <li role="presentation" <%= active_class_notice(:profile) %>>
    <a href="/authors/<%= @author.id %>/profile" aria-controls="profile" role="tab">Profile</a>
  </li>

</ul>

<% if @texts.blank? %>
  <div role="tabpanel" class="tab-pane" id="profile">
    <%= render 'profile' %>
  </div>
<% else %>
  <%= render partial: 'authors_texts', locals: {texts: @texts} %>
<% end %>



<script>
    draw_histogram();

    function draw_histogram() {
        var translationsYears = [<%= translations_years_list(@author) %>];
        var studiesYears = [<%= studies_years_list(@author) %>];

        var combinedYears = translationsYears.concat(studiesYears);

        var buckets = {};

        combinedYears.forEach(year => {
            if (buckets[year]) {
                buckets[year]++;
            } else {
                buckets[year] = 1;
            }
        });

        var biggestBucketSize = 0;
        for (const [key, value] of Object.entries(buckets)) {
            biggestBucketSize = biggestBucketSize < value ? value : biggestBucketSize;
        }

        console.log(buckets);

        var minYear = Math.min(...combinedYears);
        var maxYear = Math.max(...combinedYears);

        var yearSpan = maxYear - minYear;
        console.log('Will have ' + yearSpan + 'bins');

        var binSize = 1;
        if (yearSpan > 50) {
            binSize = 5;
        }

        var minTick = minYear;
        var maxTick = maxYear + 1;

        if (yearSpan < 11) {
            maxTick = minYear + 10;
        }

        // Add nulls to data to force trace to render even
        // if empty.
        if (studiesYears.length === 0) {
            studiesYears.push(null);
        }
        if (translationsYears.length === 0) {
            translationsYears.push(null);
        }

        var translationsTrace = {
            x: translationsYears,
            name: 'By <%= @author.full_name %>',
            xbins: {
                start: minYear - 1,
                end: maxTick,
                size: binSize
            },
            type: 'histogram',
            marker: {
                color: "rgba(117, 107, 177, 0.7)",
                line: {
                    color: "rgba(188,189,220, .04)",
                    width: 1
                },
            }
        };

        var studiesTrace = {
            x: studiesYears,
            name: 'About <%= @author.full_name %>',
            xbins: {
                start: minTick,
                end: maxTick,
                size: binSize
            },
            type: 'histogram',
            marker: {
                dtick: 1,
                color: "rgba(167, 177, 107, 0.7)",
                line: {
                    color: "rgba(255,189,220, .04)",
                    width: 1
                },
            }
        };

        var data = [translationsTrace, studiesTrace];
        var layout = {
            yaxis: {
                autotick: (biggestBucketSize > 3),
                dtick: 1
            },
            xaxis: {
                autotick: (yearSpan > 5),
                dtick: 1,
                range: [minTick, maxTick]
            },
            barmode: 'stack',
            margin: {
                l: 40,
                r: 40,
                b: 40,
                t: 20,
                pad: 4
            },
            height: 300,
            dragmode: false,
            bargroupgap: .1
        };
        Plotly.newPlot('histogram-contents', data, layout, {displayModeBar: false});

        var myPlot = document.getElementById('histogram-contents');
        myPlot.on('plotly_click', function (data) {
            console.log(data);
            var pts = '';
            for (var i = 0; i < data.points.length; i++) {
                pts = 'x = ' + data.points[i].x + '\ny = ' +
                    data.points[i].y.toPrecision(4) + '\n\n';
            }
        });
    }

</script>